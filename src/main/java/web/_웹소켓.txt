[0] HTTP 프로토콜: 이동 문자 전송 규약
    클라이언트 1.--request-->  2.<--response-- 서버
    * HTTP 기반 통신은 요청이 있어야 응답이 가능: 상태유지 X

[1] 웹소켓 websocket
    1. 정의: ws 프로토콜을 기반으로 클라이언트와 서버 사이에 *지속적인 양방향* 연결
    2. 지속적인 양방향 연결 (상태유지 O)
       - 소켓: 통신의 종착점(엔드포인트, 통신을 주고받을때의 도착지점)
       - 클라이언트 소켓이 서버 소켓으로부터 연결 요청
    3. 사용처: 실시간 통신, 채팅, 알림, 보안 등등
       - 클라이언트가 요청이 없어도 응답을 받을 수 있다 <---> HTTP
    4. 소켓 통신 구조
        클라이언트소켓                         서버소켓
        1. clientSocket()                   1. serverSocket() ip:port
                                            2. bind() 바인딩: 서버 소켓 등록
        2. connect() -- 연결 요청 ---------> 3. accept(): 클라이언트 요청 수용
        ===================================================================
        * 클라이언트 소켓 정보가 서버 소켓에 등록되어 서버 소켓은 클라이언트 소켓에 대해 알고 있음 (상태유지)
        5. write() <-----------------------> 6. read()
        통신 보내기 / 받기                     통신 보내기 / 받기
        ===================================================================
        7. close()                          7. close(): 연결 끊기

[2] 서버 소켓 구현
    1. 스프링에서 서버 소켓 구현
        1. 웹소켓 라이브러리 dependency 추가: build.gradle  implementation 'org.springframework.boot:spring-boot-starter-websocket'
        2. 서버 소켓 핸들러(컨트롤러) 추가
            1) WebSocketConfig 클래스 생성
            2) class implements WebSocketConfigurer, 인터페이스 구현
            3) registerWebSocketHandlers 메소드 구현
                - registry.addHandler('핸들러객체', 'ws서버소켓주소')
            4) 웹서버 소켓 핸들러/컨트롤러 만들기
                - ChatController 클래스 만들기
                - extends TextWebSocketHandler 클래스 상속
                1. 클라이언트가 서버 소켓과 접속 요청이 성공 했을때
                    afterConnectionEstablished 메소드 실행
                2. 클라이언트가 서버 소켓과 접속이 끊겼을때
                    afterConnectionClosed 메소드 실행

[3] 클라이언트 소켓 구현 in JS
    1. JS에서 클라이언트 소켓 구현 하는 방법
        - WebSocket 클래스 이용한 클라이언트 소켓 구현
        1. 클라이언트 소켓 생성
        new WebSocket("서버소켓의URL")