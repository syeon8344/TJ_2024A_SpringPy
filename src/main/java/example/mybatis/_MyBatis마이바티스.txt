[1] JDBC(Java DataBase Connectivity)
    - 자바에서 데이터베이스에 접속할 수 있는 자바 API
    - 대표 인터페이스
        1. Connection
        2. PreparedStatement(ps)
        3. ResultSet(rs)

[2] 마이바티스(MyBatis)
    - 자바에서 데이터베이스와 상호작용할 수 있도록 매우 유연한 퍼시스턴스 프레임워크를 제공
        - Persistence: 데이터 영속성(프로그램 종료 후에도 데이터가 남아있는 것)
        - 퍼시스턴스 프레임워크: 데이터베이스 연동 시스템 개발 및 구동을 돕는 프레임워크
    - 특징
        1. SQL 매핑: XML 파일에 SQL문 작성해서 자바 객체와 매핑 가능
            - XML: 데이터 교환 및 전송 마크업 언어(데이터를 설명) v. HTML: UI 마크업 언어(데이터 최종 표시 방법)
        2. 자동 매핑: SQL 쿼리 결과를 자바 객체로 자동으로 매핑 가능
        3. 유연성: SQL문을 직접 작성 및 제어, 복잡한 쿼리와 기능 사용 가능 ( <---> JPA)
            - MyBatis: SQL Mapper (SQL 쿼리로 데이터 조작) v. JPA: ORM(객체-관계형 DB 매핑)
            - 직접 쓴 SQL문 사용 v. 테이블 객체에 메소드 호출
        4. 스프링 통합

    설치방법
    1) 그레이들 디펜던시
        implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
    2) application.properties(스프링 프레임워크 실행시 읽어들이는 설정파일)
        resources/application.properties
        1. JDBC DB URL
            spring.datasource.url=jdbc:mysql://IP주소:포트/DB명
        2. JDBC DB URL USERNAME
            spring.datasource.username=아이디
        3. JDBC DB URL PASSWORD ('=' 앞뒤 띄어쓰기 주의, 띄어쓰기도 비밀번호에 포함)
            spring.datasource.password=비밀번호
        4. MyBatis Mapper XML File Path
            mybatis.mapper-locations=classpath:mybatis/mappers/*.xml
                * resources/(mybatis 또는 지정 폴더명)/(mappers 또는 지정 폴더명)/*.xml
    3) 인터페이스 작성
        @Mapper
        public interface 인터페이스명{
            // 추상메서드
            반환타입 메서드명();
        }

    4) XML 작성
        1. XML 파일 생성하고 MyBatis와 연동 코드 작성:
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE mapper
                    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

        2. 인터페이스(DAO) 매핑하는 XML 코드 작성
            <DML id="매핑할 추상코드" parameterType="매개변수타입", resultType="반환타입">
            * parameterType과 resultType에는 일반적으로 한 종류의 타입만 지정 가능
                -> 여러 타입을 반환하려면 Map 인터페이스, DTO 생성 및 사용 등 필요

            - insert: 기본 반환타입 int(레코드 등록 개수)
                <insert> insert문 </insert>

            - select
                <select> select문 </select>

            - update: 기본 반환타입 int(레코드 수정 개수)
                <update> update문 </update>

            - delete: 기본 반환타입 int(레코드 삭제 개수)
                <delete> delete문 </delete>
